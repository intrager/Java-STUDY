// 컬렉션(Collection) 프레임워크란 무엇인지 개념을 설명해보시오
// 이 문제는 자바의 컬렉션에 대한 이해와 개념에 대해서 설명할 수 있는지 묻는 문제이다.

// [0] : 컬렉션 사전학습
// 사전학습 --> OOP, 추상 클래스, 상속, 인터페이스 
// 여기 과정에서도 컬렉션에 대한 개념과 ArrayList 클래스 위주로 진행

// [1] : Collection Framework란?
// "수집품"이라는 사전적 의미에서 유추할 수 있듯이 "데이터 값들을 담는 여러 그릇" 정도로 이해하면 된다.
// 집 부엌 천장을 열어보면 종류별로, 용도별로 그릇이 많이 있듯이 어떤 자료구조 데이터를 저장하고 관리할 것인지에 따라서 맞는 그릇을 써야 한다.
// 내가 만들 프로그램의 데이터 처리를 어떻게 할지 그 특징을 잘 파악하여 컬렉션 내 맞는 그릇(클래스)을 잘 골라써야 한다.
// 이러한 것은 파이썬에서도 마찬가지이다. 용도에 맞는 걸 써야 효율적이지 않겠는가?
// 컬렉션 프레임워크는 크게 봤을 때 --> Collection과 Map으로 나뉘고 --> 이 둘은 모두 인터페이스(Interface)로 되어 있다.
// Collection은 또 List와 Set으로 나뉘고 --> 이들도 인터페이스 --> 이들을 상속받아 다양한 형태의 배열(그릇, 클래스)로 사용된다.

// [2] : Collection
// Collection(인터페이스) --> 상속 --> List와 Set으로 구분 (인터페이스) --> 상속 --> List 계열 구현 클래스 vs Set 계열 구현 클래스
// List 계열 구현 클래스 --> ArrayList, LinkedList, Vector, Stack
// Set 계열 구현 클래스 --> HashSet, SortedSet, TreeSet

// [3] : List vs Set
// 컬렉션 프레임워크의 핵심 인터페이스들
// List 인터페이스를 상속하는 클래스들 특징 --> (1) 인덱스가 있고, (2) 그래서 저장 순서가 유지되고, (3) 데이터 중복이 허용됨
// Set 인터페이스를 상속하는 클래스들 특징 --> (1) 데이터 중복이 허용 안 됨


/* --- 인터페이스 --- */

// 자바의 인터페이스 문법을 예제 코드로 구현해보시오
// 이 문제는 자바 문법 중 인터페이스에 대한 개념 및 어떻게 사용하는지에 대해서 아는지를 묻는 문제이다.
// 코드를 작성하기 전 아래 4개의 인터페이스 관련 질문에 답해보시오

// [1] : 인터페이스
// 추상 클래스와 거의 비슷하나 그 추상화 정도가 더 높다(더 엄격) --> 일반 메서드나 멤버 필드(변수)를 가질 수 없다.
// 표준화 및 규격을 인터페이스로 제공 --> 일종의 "설계도" 개념
// 따라서, 어떤 클래스가 해당 인터페이스를 사용(상속)한다면 인터페이스에 선언되어 있는 메서드를 구현
// 인터페이스는 interface 키워드를 사용
// 추상 클래스와 같이 메서드의 구체적인 내용은 기술되어져 있지 않으므로 인터페이스를 상속받은 클래스에서 재정의(오버라이딩)사용

// [2] : 상속
// 클래스는 "단일 상속"만 가능. 인터페이스는 "다중 상속"이 가능 --> 가장 큰 차이점
// class --> extends, interface --> implements --> 다중 상속을 구현 --> A, B --> 콤마(,)로 분리
// 즉, 이를 활용하면 여러 개의 인터페이스로부터 메서드를 받아올 수 있게 된다. --> 다중 상속 구현

// [3] : 장점
// 인터페이스를 이용하면 메서드의 추상적인 "선언"과 그 메서드들을 구체적인 "구현" 부분을 분리시킬 수 있다. --> 매우 큰 장점
// 하청을 주는 대기업(갑)은 하청업체(을)에 인터페이스만 제공 --> 각 하청업체(을)들이 이를 준수하여(=상속받아) 개발
// 분업화된 시스템을 구축하여 "갑"과 "을"이 독립적으로 프로젝트 개발을 해나갈 수 있다. --> 매우 큰 장점

// [4] : 우선 순위(extends vs. implements)
// 상속을 받는 extends 키워드와 구현을 하는 implements 키워드가 동시에 쓰일 때 --> extends 키워드가 항상 먼저 쓰인다.
// 예시) class Student extends Person implements A, B