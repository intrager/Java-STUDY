// 다음 중 객체 생성 방법이 틀린 것을 골라보시오
// 앞서 다형성(polymorphism)의 개념에 대해서 살펴봤는데, 코드를 통해서 실습해보는 문제이다.

// [1] : 다형성이란?
// 다양한 형태 또는 특성을 가진다는 의미
// 자바와 같은 객체 지향 언어에서의 의미는 부모 클래스를 상속받은 자식 클래스의 인스턴스가 부모의 객체로도 사용되고,
// 뿐만 아니라 자식 클래스의 객체로도 사용될 수 있는 다양한 상황을 의미한다.

// [2] : 예시
// 부모 클래스 Person이 있고, 이를 상속받은 자식 클래스 Student 있다고 가정하자
// 이때, "학생이 말을 하네... 허허~" 사람들이 이렇게 말할 수 있다.
// 그런데, 학생은 사람이기 때문에 "사람이 말을 하네... 허허" <-- 이렇게 말할 수 있다.

// [3] : 결론
// 정리하면, 하위 클래스의 인스턴스(객체)는 보다 위인 상위 클래스의 인스턴스(객체)로도 사용될 수 있다.
// 그런데, 그 반대는 안 된다.
// 왜냐하면, "학생"은 분명 그 상위인 "사람"이라고 말할 수 있지만, 사람는 상황마다 다르기 때문에 모든 사람이 학생은 아니기 때문이다.
// 따라서, 상위(부모)클래스의 인스턴스(객체)는 하위(자식)클래스의 인스턴스(객체)로 사용될 수 없다.

class Person {}
class Student extends Person {}

public class Java100_oop_Polymorphism2 {
	public static void main(String[] args) {
	
		// [1] : 객체 생성
		Student studentOne = new Student();	// 정상
	
		// [2] : 객체 생성 --> 타입은 부모 타입으로 생성
		Person studentTwo = new Student();	// 정상 --> 하위(자식) 클래스로 객체를 만들면서, 타입은 상위(부모) 타입을 쓰는 것이 가능 --> 다형성
	
		// [3] : 객체 생성
		Person personOne = new Person();	// 정상
		
		// [4] : 객체 생성 --> 상위(부모) 클래스로 객체를 생성하면서 타입은 하위(자식) 타입을 쓰는 경우 --> error
		// Student personTwo = new Person();	// error
	}
}